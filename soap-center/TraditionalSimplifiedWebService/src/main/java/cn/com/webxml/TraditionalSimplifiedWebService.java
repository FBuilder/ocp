
/*
 * 
 */

package cn.com.webxml;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 2.2.12
 * Wed Nov 28 11:56:24 GMT+08:00 2018
 * Generated source version: 2.2.12
 * 
 */


@WebServiceClient(name = "TraditionalSimplifiedWebService", 
                  wsdlLocation = "http://www.webxml.com.cn/WebServices/TraditionalSimplifiedWebService.asmx?wsdl",
                  targetNamespace = "http://webxml.com.cn/") 
public class TraditionalSimplifiedWebService extends Service {

    public final static URL WSDL_LOCATION;
    public final static QName SERVICE = new QName("http://webxml.com.cn/", "TraditionalSimplifiedWebService");
    public final static QName TraditionalSimplifiedWebServiceSoap = new QName("http://webxml.com.cn/", "TraditionalSimplifiedWebServiceSoap");
    public final static QName TraditionalSimplifiedWebServiceSoap12 = new QName("http://webxml.com.cn/", "TraditionalSimplifiedWebServiceSoap12");
    public final static QName TraditionalSimplifiedWebServiceHttpGet = new QName("http://webxml.com.cn/", "TraditionalSimplifiedWebServiceHttpGet");
    public final static QName TraditionalSimplifiedWebServiceHttpPost = new QName("http://webxml.com.cn/", "TraditionalSimplifiedWebServiceHttpPost");
    static {
        URL url = null;
        try {
            url = new URL("http://www.webxml.com.cn/WebServices/TraditionalSimplifiedWebService.asmx?wsdl");
        } catch (MalformedURLException e) {
            System.err.println("Can not initialize the default wsdl from http://www.webxml.com.cn/WebServices/TraditionalSimplifiedWebService.asmx?wsdl");
            // e.printStackTrace();
        }
        WSDL_LOCATION = url;
    }

    public TraditionalSimplifiedWebService(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public TraditionalSimplifiedWebService(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public TraditionalSimplifiedWebService() {
        super(WSDL_LOCATION, SERVICE);
    }
    
    public TraditionalSimplifiedWebService(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }
    public TraditionalSimplifiedWebService(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public TraditionalSimplifiedWebService(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }

    /**
     * 
     * @return
     *     returns TraditionalSimplifiedWebServiceSoap
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceSoap")
    public TraditionalSimplifiedWebServiceSoap getTraditionalSimplifiedWebServiceSoap() {
        return super.getPort(TraditionalSimplifiedWebServiceSoap, TraditionalSimplifiedWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TraditionalSimplifiedWebServiceSoap
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceSoap")
    public TraditionalSimplifiedWebServiceSoap getTraditionalSimplifiedWebServiceSoap(WebServiceFeature... features) {
        return super.getPort(TraditionalSimplifiedWebServiceSoap, TraditionalSimplifiedWebServiceSoap.class, features);
    }
    /**
     * 
     * @return
     *     returns TraditionalSimplifiedWebServiceSoap
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceSoap12")
    public TraditionalSimplifiedWebServiceSoap getTraditionalSimplifiedWebServiceSoap12() {
        return super.getPort(TraditionalSimplifiedWebServiceSoap12, TraditionalSimplifiedWebServiceSoap.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TraditionalSimplifiedWebServiceSoap
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceSoap12")
    public TraditionalSimplifiedWebServiceSoap getTraditionalSimplifiedWebServiceSoap12(WebServiceFeature... features) {
        return super.getPort(TraditionalSimplifiedWebServiceSoap12, TraditionalSimplifiedWebServiceSoap.class, features);
    }
    /**
     * 
     * @return
     *     returns TraditionalSimplifiedWebServiceHttpGet
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceHttpGet")
    public TraditionalSimplifiedWebServiceHttpGet getTraditionalSimplifiedWebServiceHttpGet() {
        return super.getPort(TraditionalSimplifiedWebServiceHttpGet, TraditionalSimplifiedWebServiceHttpGet.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TraditionalSimplifiedWebServiceHttpGet
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceHttpGet")
    public TraditionalSimplifiedWebServiceHttpGet getTraditionalSimplifiedWebServiceHttpGet(WebServiceFeature... features) {
        return super.getPort(TraditionalSimplifiedWebServiceHttpGet, TraditionalSimplifiedWebServiceHttpGet.class, features);
    }
    /**
     * 
     * @return
     *     returns TraditionalSimplifiedWebServiceHttpPost
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceHttpPost")
    public TraditionalSimplifiedWebServiceHttpPost getTraditionalSimplifiedWebServiceHttpPost() {
        return super.getPort(TraditionalSimplifiedWebServiceHttpPost, TraditionalSimplifiedWebServiceHttpPost.class);
    }

    /**
     * 
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns TraditionalSimplifiedWebServiceHttpPost
     */
    @WebEndpoint(name = "TraditionalSimplifiedWebServiceHttpPost")
    public TraditionalSimplifiedWebServiceHttpPost getTraditionalSimplifiedWebServiceHttpPost(WebServiceFeature... features) {
        return super.getPort(TraditionalSimplifiedWebServiceHttpPost, TraditionalSimplifiedWebServiceHttpPost.class, features);
    }

}
